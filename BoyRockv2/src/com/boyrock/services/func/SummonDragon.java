package com.boyrock.services.func;

import java.util.HashMap;
import java.util.Map;

import com.girlkun.network.io.Message;
import com.boyrock.consts.ConstNpc;
import com.boyrock.consts.ConstPlayer;
import com.boyrock.jdbc.daos.GodGK;
import com.boyrock.jdbc.daos.PlayerDAO;
import com.boyrock.models.item.Item;
import com.boyrock.models.item.Item.ItemOption;
import com.boyrock.models.map.Zone;
import com.boyrock.models.player.Inventory;
import com.boyrock.models.player.Player;
import com.boyrock.server.Client;
import com.boyrock.services.InventoryServiceNew;
import com.boyrock.services.ItemService;
import com.boyrock.services.ItemTimeService;
import com.boyrock.services.NpcService;
import com.boyrock.services.PlayerService;
import com.boyrock.services.Service;
import com.boyrock.utils.Logger;
import com.boyrock.utils.Util;

import java.util.List;

/**
 *
 * @Stole By Lucy#0800üíñ
 *
 */
public class SummonDragon {

    public static final byte WISHED = 0;
    public static final byte TIME_UP = 1;

    public static final byte DRAGON_SHENRON = 0;
    public static final byte DRAGON_PORUNGA = 1;
    public static final byte DRAGON_BANG = 2;
    public static final byte DRAGON_XUONG = 3;
    //
    public static final short NGOC_RONG_1_SAO = 14;
    public static final short NGOC_RONG_2_SAO = 15;
    public static final short NGOC_RONG_3_SAO = 16;
    public static final short NGOC_RONG_4_SAO = 17;
    public static final short NGOC_RONG_5_SAO = 18;
    public static final short NGOC_RONG_6_SAO = 19;
    public static final short NGOC_RONG_7_SAO = 20;

    public static final short NGOC_RONGTRB1 = 2091;
    public static final short NGOC_RONGTRB2 = 2092;
    public static final short NGOC_RONGTRB3 = 2093;

    public static final short NGOC_RONG_DEN_1_SAO = 807;
    public static final short NGOC_RONG_DEN_2_SAO = 808;
    public static final short NGOC_RONG_DEN_3_SAO = 809;
    public static final short NGOC_RONG_DEN_4_SAO = 810;
    public static final short NGOC_RONG_DEN_5_SAO = 811;
    public static final short NGOC_RONG_DEN_6_SAO = 812;
    public static final short NGOC_RONG_DEN_7_SAO = 813;

    public static final short NGOC_RONG_BANG_1_SAO = 925;
    public static final short NGOC_RONG_BANG_2_SAO = 926;
    public static final short NGOC_RONG_BANG_3_SAO = 927;
    public static final short NGOC_RONG_BANG_4_SAO = 928;
    public static final short NGOC_RONG_BANG_5_SAO = 929;
    public static final short NGOC_RONG_BANG_6_SAO = 930;
    public static final short NGOC_RONG_BANG_7_SAO = 931;
    //

    public static final String SUMMON_SHENRON_TUTORIAL = "C√≥ 3 c√°ch g·ªçi r·ªìng th·∫ßn. G·ªçi t·ª´ ng·ªçc 1 sao, g·ªçi t·ª´ ng·ªçc 2 sao, ho·∫∑c g·ªçi t·ª´ ng·ªçc 3 sao\n"
            + "C√°c ng·ªçc 4 sao ƒë·∫øn 7 sao kh√¥ng th·ªÉ g·ªçi r·ªìng th·∫ßn ƒë∆∞·ª£c\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 1 sao c·∫ßn ng·ªçc t·ª´ 1 sao ƒë·∫øn 7 sao\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 2 sao c·∫ßn ng·ªçc t·ª´ 2 sao ƒë·∫øn 7 sao\n"
            + "ƒê·ªÉ g·ªçi r·ªìng 3 sao c·∫ßn ng·ªçc t·ª´ 3 sao ƒë·∫øn 7sao\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 3 sao: Capsule 3 sao, ho·∫∑c 2 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 200k v√†ng\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 2 sao: Capsule 2 sao, ho·∫∑c 20 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 200 tri·ªáu v√†ng\n"
            + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: Capsule 1 sao, ho·∫∑c 200 tri·ªáu s·ª©c m·∫°nh, ho·∫∑c 2 t·ªèi, ho·∫∑c ƒë·∫πp trai, ho·∫∑c....\n"
            + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
            + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String SHENRON_SAY = "Ta s·∫Ω ban cho ng∆∞·ªùi 1 ƒëi·ªÅu ∆∞·ªõc, ng∆∞∆°i c√≥ 5 ph√∫t, h√£y suy nghƒ© th·∫≠t k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh";
    public static final String SUMMON_SHENRON_TRB

            = "ƒê·ªÉ g·ªçi r·ªìng c·∫ßn ng·ªçc t·ª´ 1 sao ƒë·∫øn 3 sao\n"
                    + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: TƒÉng 30% S·ª©c ƒê√°nh , ho·∫∑c 30% HP, ho·∫∑c 30% KI Trong 30 ph√∫t!\n"
                    + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
                    + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String[] SHENRON_1_STAR_TRB = new String[] { "S·ª©c ƒê√°nh\n+30%", "HP\n+30%", "KI\n+30%",
            "30% crit", "GƒÉng ƒêang ƒêeo\nL√™n 1% SD Ch√≠ M·∫°ng" };
    // BLACK
    public static final String SUMMON_SHENRON_BLACK

            = "ƒê·ªÉ g·ªçi r·ªìng x∆∞∆°ng c·∫ßn ng·ªçc t·ª´ 1 sao ƒë·∫øn 7 sao\n"
                    + "ƒêi·ªÅu ∆∞·ªõc r·ªìng 1 sao: 20 Th·ªèi v√†ng , ho·∫∑c 5k H·ªìng ng·ªçc, ho·∫∑c 20 ƒê√° ng≈© s·∫Øc, ho·∫∑c 20 qu·∫£ h·ªìng ƒë√†o, ho·∫∑c 20 huy ch∆∞∆°ng!\n"
                    + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
                    + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String[] SHENRON_1_STAR_BLACK = new String[] { "20\nTh·ªèi V√†ng", "5k\nH·ªìng Ng·ªçc", "20\nƒê√° ng≈© s·∫Øc",
            "20\nH·ªìng ƒê√†o", "20\nHuy ch∆∞∆°ng" };
    // BANG
    public static final String SUMMON_SHENRON_BANG

            = "ƒê·ªÉ g·ªçi r·ªìng bƒÉng c·∫ßn ng·ªçc t·ª´ 1 sao ƒë·∫øn 7 sao\n"
                    + "ƒêi·ªÅu ∆∞·ªõc r·ªìng bƒÉng 1 sao: 20 m·∫£nh √°o , ho·∫∑c 20 m·∫£nh qu·∫ßn, ho·∫∑c 20 m·∫£nh gƒÉng , ho·∫∑c 20 m·∫£nh nh·∫´n, ho·∫∑c 20 m·∫£nh gi√†y\n"
                    + "Ng·ªçc r·ªìng s·∫Ω m·∫•t ngay khi g·ªçi r·ªìng d√π b·∫°n c√≥ ∆∞·ªõc hay kh√¥ng\n"
                    + "Qu√° 5 ph√∫t n·∫øu kh√¥ng ∆∞·ªõc r·ªìng th·∫ßn s·∫Ω bay m·∫•t";
    public static final String[] SHENRON_1_STAR_BANG = new String[] { "20 \n M·∫£nh √Åo", "20 \n M·∫£nh Qu·∫ßn", "20 \n M·∫£nh GƒÉng",
            "20 \n M·∫£nh Nh·∫´n", "20 \n M·∫£nh gi√†y" };
    //
    public static final String[] SHENRON_1_STAR_WISHES_1 = new String[] { "Gi√†u c√≥\n+2 T·ªèi\nV√†ng",
            "GƒÉng tay\nƒëang mang\nl√™n 1 c·∫•p", "Ch√≠ m·∫°ng\nG·ªëc +2%",
            "Thay\nChi√™u 2-3\nƒê·ªá t·ª≠", "ƒêi·ªÅu ∆∞·ªõc\nkh√°c" };
    public static final String[] SHENRON_1_STAR_WISHES_2 = new String[] { "ƒê·∫πp trai\nnh·∫•t\nV≈© tr·ª•",
            "Gi√†u c√≥\n+2K\nH·ªìng Ng·ªçc", "ƒê·ªôt ph√° s·ª©c m·∫°nh",
            "GƒÉng tay ƒë·ªá\nƒëang mang\nl√™n 1 c·∫•p",
            "ƒêi·ªÅu ∆∞·ªõc\nkh√°c" };
    public static final String[] SHENRON_2_STARS_WHISHES = new String[] { "Gi√†u c√≥\n+700K\nH·ªìng Ng·ªçc",
            "+20 Tr\nS·ª©c m·∫°nh\nv√† ti·ªÅm nƒÉng", "Gi√†u c√≥\n+200 Tr\nV√†ng" };
    public static final String[] SHENRON_3_STARS_WHISHES = new String[] { "Gi√†u c√≥\n+100\nH·ªìng Ng·ªçc",
            "+2 Tr\nS·ª©c m·∫°nh\nv√† ti·ªÅm nƒÉng", "Gi√†u c√≥\n+20 Tr\nV√†ng" };
    // --------------------------------------------------------------------------
    private static SummonDragon instance;
    private final Map pl_dragonStar;

    private long lastTimeShenronAppeared;
    private long lastTimeShenronWait;
    private final int timeResummonShenron = 300000;

    private boolean isShenronAppear;
    private final int timeShenronWait = 300000;

    private final Thread update;
    private boolean active;
    // trb
    private long lastTimetrbAppeared;
    private long lastTimetrbWait;
    private final int timeResummontrb = 300000;
    private int playertrbnronId;
    // bang
    private long lastTimebangAppeared;
    private long lastTimebangWait;
    private final int timeResummonbang = 300000;
    private int playerbangnronId;
    // black
    private long lastTimeblackAppeared;
    private long lastTimeblackWait;
    private final int timeResummonblack = 300000;
    private int playerblacknronId;
    //
    public boolean isPlayerDisconnect;
    public Player playerSummonShenron;
    private int playerSummonShenronId;
    private Zone mapShenronAppear;
    private byte shenronStar;
    private int menuShenron;
    private byte select;

    private SummonDragon() {
        this.pl_dragonStar = new HashMap<>();
        this.update = new Thread(() -> {
            while (active) {
                try {
                    if (isShenronAppear) {
                        if (isPlayerDisconnect) {

                            List<Player> players = mapShenronAppear.getPlayers();
                            for (Player plMap : players) {
                                if (plMap.id == playerSummonShenronId) {
                                    playerSummonShenron = plMap;
                                    reSummonShenron();
                                    isPlayerDisconnect = false;
                                    break;
                                }
                            }

                        }
                        if (Util.canDoWithTime(lastTimeShenronWait, timeShenronWait)) {
                            shenronLeave(playerSummonShenron, TIME_UP);
                        }
                    }
                    Thread.sleep(1000);
                } catch (Exception e) {
                    Logger.logException(SummonDragon.class, e);
                }
            }
        });
        this.active();
    }

    private void active() {
        if (!active) {
            active = true;
            this.update.start();
        }
    }

    public void summonNamec(Player pl) {
        if (pl.zone.map.mapId == 7) {
            playerSummonShenron = pl;
            playerSummonShenronId = (int) pl.id;
            mapShenronAppear = pl.zone;
            sendNotifyShenronAppear();
            activeShenron(pl, true, SummonDragon.DRAGON_PORUNGA);
            sendWhishesNamec(pl);
        } else {
            Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
        }
    }

    public static SummonDragon gI() {
        if (instance == null) {
            instance = new SummonDragon();
        }
        return instance;
    }

    public void openMenuSummonShenron(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRON, -1, "B·∫°n mu·ªën g·ªçi r·ªìng th·∫ßn ?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void summonShenron(Player pl) {
        if (pl.zone.map.mapId == 0 || pl.zone.map.mapId == 7 || pl.zone.map.mapId == 14) {
            if (checkShenronBall(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                if (Util.canDoWithTime(lastTimeShenronAppeared, timeResummonShenron)) {
                    // g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    playerSummonShenronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    byte dragonStar = (byte) pl_dragonStar.get(playerSummonShenron);
                    int begin = NGOC_RONG_1_SAO;
                    switch (dragonStar) {
                        case 2:
                            begin = NGOC_RONG_2_SAO;
                            break;
                        case 3:
                            begin = NGOC_RONG_3_SAO;
                            break;
                    }
                    for (int i = begin; i <= NGOC_RONG_7_SAO; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl,
                                    InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_SHENRON);
                    sendWhishesShenron(pl);
                } else {
                    int timeLeft = (int) ((timeResummonShenron - (System.currentTimeMillis() - lastTimeShenronAppeared))
                            / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i "
                            + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Ch·ªâ ƒë∆∞·ª£c g·ªçi r·ªìng th·∫ßn ·ªü ng√¥i l√†ng tr∆∞·ªõc nh√†");
        }
    }

    public void openMenuSummonShenronTRB(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRONTRB, -1, "B·∫°n mu·ªën g·ªçi r·ªìng th·∫ßn TRB?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void openMenuSummonShenronBang(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRONBANG, -1, "B·∫°n mu·ªën g·ªçi r·ªìng bƒÉng?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void openMenuSummonShenronBlack(Player pl, byte dragonBallStar) {
        this.pl_dragonStar.put(pl, dragonBallStar);
        NpcService.gI().createMenuConMeo(pl, ConstNpc.SUMMON_SHENRONBLACK, -1, "B·∫°n mu·ªën g·ªçi r·ªìng x∆∞∆°ng?",
                "H∆∞·ªõng\nd·∫´n th√™m\n(m·ªõi)", "G·ªçi\nR·ªìng Th·∫ßn\n" + dragonBallStar + " Sao");
    }

    public void summonShenronTRB(Player pl) {
        if (pl.zone.map.mapId == 170) {
            if (checkShenronBalltrb(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                if (Util.canDoWithTime(lastTimetrbAppeared, timeResummontrb)) {
                    // g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    playertrbnronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    int begin = NGOC_RONGTRB1;

                    for (int i = begin; i <= NGOC_RONGTRB3; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl,
                                    InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_PORUNGA);
                    sendWhishesShenrontrb(pl);
                } else {
                    int timeLeft = (int) ((timeResummontrb - (System.currentTimeMillis() - lastTimetrbAppeared))
                            / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i "
                            + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Ch·ªâ ƒë∆∞·ª£c g·ªçi r·ªìng th·∫ßn ·ªü h√†nh tinh Celreal");
        }
    }

    private void sendWhishesShenrontrb(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
            case 2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
            case 3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONTRB, SHENRON_SAY, SHENRON_1_STAR_TRB);
                break;
        }
    }

    private boolean checkShenronBalltrb(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        Item t2 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONGTRB2);
        Item t3 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONGTRB3);
        if (t2.quantity < 1 || t2 == null) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 2 sao");
            return false;
        }
        if (t3.quantity < 1 || t2 == null) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
            return false;
        }

        return true;
    }

    // bang
    public void summonShenronBang(Player pl) {
        if (pl.zone.map.mapId == 176) {
            if (checkShenronBallBang(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                if (Util.canDoWithTime(lastTimebangAppeared, timeResummonbang)) {
                    // g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    playerbangnronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    int begin = NGOC_RONG_BANG_1_SAO;

                    for (int i = begin; i <= NGOC_RONG_BANG_7_SAO; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl,
                                    InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_BANG);
                    sendWhishesShenronBang(pl);
                } else {
                    int timeLeft = (int) ((timeResummonbang - (System.currentTimeMillis() - lastTimebangAppeared))
                            / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i "
                            + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Ch·ªâ ƒë∆∞·ª£c g·ªçi r·ªìng th·∫ßn ·ªü h√†nh tinh Thi√™n s·ª© 3");
        }
    }

    private boolean checkShenronBallBang(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        Item s2 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_2_SAO);
        Item s3 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_3_SAO);
        Item s4 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_4_SAO);
        Item s5 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_5_SAO);
        Item s6 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_6_SAO);
        Item s7 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_BANG_7_SAO);
        if (dragonStar == 1) {
            if (s2 == null || s2.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 2 sao");
                return false;
            }
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        } else if (dragonStar == 2) {
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        }
        if (s4 == null || s4.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 4 sao");
            return false;
        }
        if (s5 == null || s5.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 5 sao");
            return false;
        }
        if (s6 == null || s6.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 6 sao");
            return false;
        }
        if (s7 == null || s7.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 7 sao");
            return false;
        }
        return true;
    }

    private void sendWhishesShenronBang(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONBANG, SHENRON_SAY, SHENRON_1_STAR_BANG);
                break;

        }
    }

    // black
    public void summonShenronBlack(Player pl) {
        if (pl.zone.map.mapId == 159) {
            if (checkShenronBallBlack(pl)) {
                if (isShenronAppear) {
                    Service.gI().sendThongBao(pl, "Kh√¥ng th·ªÉ th·ª±c hi·ªán");
                    return;
                }

                if (Util.canDoWithTime(lastTimeblackAppeared, timeResummonblack)) {
                    // g·ªçi r·ªìng
                    playerSummonShenron = pl;
                    playerblacknronId = (int) pl.id;
                    mapShenronAppear = pl.zone;
                    int begin = NGOC_RONG_DEN_1_SAO;

                    for (int i = begin; i <= NGOC_RONG_DEN_7_SAO; i++) {
                        try {
                            InventoryServiceNew.gI().subQuantityItemsBag(pl,
                                    InventoryServiceNew.gI().findItemBag(pl, i), 1);
                        } catch (Exception ex) {
                        }
                    }
                    InventoryServiceNew.gI().sendItemBags(pl);
                    sendNotifyShenronAppear();
                    activeShenron(pl, true, SummonDragon.DRAGON_XUONG);
                    sendWhishesShenronBlack(pl);
                } else {
                    int timeLeft = (int) ((timeResummonblack - (System.currentTimeMillis() - lastTimeblackAppeared))
                            / 1000);
                    Service.gI().sendThongBao(pl, "Vui l√≤ng ƒë·ª£i "
                            + (timeLeft < 7200 ? timeLeft + " gi√¢y" : timeLeft / 60 + " ph√∫t") + " n·ªØa");
                }
            }
        } else {
            Service.gI().sendThongBao(pl, "Ch·ªâ ƒë∆∞·ª£c g·ªçi r·ªìng th·∫ßn ·ªü nam th√°nh ƒë·ªãa");
        }
    }

    private boolean checkShenronBallBlack(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        Item s2 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_2_SAO);
        Item s3 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_3_SAO);
        Item s4 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_4_SAO);
        Item s5 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_5_SAO);
        Item s6 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_6_SAO);
        Item s7 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_DEN_7_SAO);
        if (dragonStar == 1) {
            if (s2 == null || s2.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 2 sao");
                return false;
            }
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        } else if (dragonStar == 2) {
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        }
        if (s4 == null || s4.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 4 sao");
            return false;
        }
        if (s5 == null || s5.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 5 sao");
            return false;
        }
        if (s6 == null || s6.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 6 sao");
            return false;
        }
        if (s7 == null || s7.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 7 sao");
            return false;
        }
        return true;
    }

    private void sendWhishesShenronBlack(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRONBLACK, SHENRON_SAY, SHENRON_1_STAR_BLACK);
                break;

        }
    }

    //
    private void reSummonShenron() {
        activeShenron(playerSummonShenron, true, SummonDragon.DRAGON_SHENRON);
        sendWhishesShenron(playerSummonShenron);
    }

    private void sendWhishesShenron(Player pl) {
        byte dragonStar;
        try {
            dragonStar = (byte) pl_dragonStar.get(pl);
            this.shenronStar = dragonStar;
        } catch (Exception e) {
            dragonStar = this.shenronStar;
        }
        switch (dragonStar) {
            case 1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_1, SHENRON_SAY, SHENRON_1_STAR_WISHES_1);
                break;
            case 2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_2, SHENRON_SAY, SHENRON_2_STARS_WHISHES);
                break;
            case 3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_3, SHENRON_SAY, SHENRON_3_STARS_WHISHES);
                break;
        }
    }

    private void sendWhishesNamec(Player pl) {
        NpcService.gI().createMenuRongThieng(pl, ConstNpc.NAMEC_1,
                "Ta s·∫Ω ban cho c·∫£ bang ng∆∞∆°i 1 ƒëi·ªÅu ∆∞·ªõc, ng∆∞∆°i c√≥ 5 ph√∫t, h√£y suy nghƒ© th·∫≠t k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh",
                "x99 ng·ªçc r·ªìng 3 sao");
    }

    private void activeShenron(Player pl, boolean appear, byte type) {
        Message msg;
        try {
            msg = new Message(-83);
            msg.writer().writeByte(appear ? 0 : (byte) 1);
            if (appear) {
                msg.writer().writeShort(pl.zone.map.mapId);
                msg.writer().writeShort(pl.zone.map.bgId);
                msg.writer().writeByte(pl.zone.zoneId);
                msg.writer().writeInt((int) pl.id);
                msg.writer().writeUTF("");
                msg.writer().writeShort(pl.location.x);
                msg.writer().writeShort(pl.location.y);
                msg.writer().writeByte(type);
                lastTimeShenronWait = System.currentTimeMillis();
                lastTimetrbWait = System.currentTimeMillis();
                lastTimebangWait = System.currentTimeMillis();
                lastTimeblackWait= System.currentTimeMillis();
                isShenronAppear = true;
            }
            Service.gI().sendMessAllPlayer(msg);
        } catch (Exception e) {
        }
    }

    private boolean checkShenronBall(Player pl) {
        byte dragonStar = (byte) this.pl_dragonStar.get(pl);
        Item s2 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_2_SAO);
        Item s3 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_3_SAO);
        Item s4 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_4_SAO);
        Item s5 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_5_SAO);
        Item s6 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_6_SAO);
        Item s7 = InventoryServiceNew.gI().findItemBag(pl, NGOC_RONG_7_SAO);
        if (dragonStar == 1) {
            if (s2 == null || s2.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 2 sao");
                return false;
            }
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        } else if (dragonStar == 2) {
            if (s3 == null || s3.quantity < 1) {
                Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 3 sao");
                return false;
            }
        }
        if (s4 == null || s4.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 4 sao");
            return false;
        }
        if (s5 == null || s5.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 5 sao");
            return false;
        }
        if (s6 == null || s6.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 6 sao");
            return false;
        }
        if (s7 == null || s7.quantity < 1) {
            Service.gI().sendThongBao(pl, "B·∫°n c√≤n thi·∫øu 1 vi√™n ng·ªçc r·ªìng 7 sao");
            return false;
        }
        return true;
    }

    private void sendNotifyShenronAppear() {
        Message msg;
        try {
            msg = new Message(-25);
            msg.writer().writeUTF(playerSummonShenron.name + " v·ª´a g·ªçi r·ªìng th·∫ßn t·∫°i "
                    + playerSummonShenron.zone.map.mapName + " khu v·ª±c " + playerSummonShenron.zone.zoneId);
            Service.gI().sendMessAllPlayerIgnoreMe(playerSummonShenron, msg);
            msg.cleanup();
        } catch (Exception e) {
        }
    }

    public void confirmWish() {
        switch (this.menuShenron) {
            case ConstNpc.SHENRON_1_1:
                switch (this.select) {
                    case 0: // 20 tr v√†ng
                        this.playerSummonShenron.inventory.gold = 2000000000;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: // gƒÉng tay ƒëang ƒëeo l√™n 1 c·∫•p
                        Item item = this.playerSummonShenron.inventory.itemsBody.get(2);
                        if (item.isNotNullItem()) {
                            int level = 0;
                            for (ItemOption io : item.itemOptions) {
                                if (io.optionTemplate.id == 72) {
                                    level = io.param;
                                    if (level < 7) {
                                        io.param++;
                                    }
                                    break;
                                }
                            }
                            if (level < 7) {
                                if (level == 0) {
                                    item.itemOptions.add(new ItemOption(72, 1));
                                }
                                for (ItemOption io : item.itemOptions) {
                                    if (io.optionTemplate.id == 0) {
                                        io.param += (io.param * 10 / 100);
                                        break;
                                    }
                                }
                                InventoryServiceNew.gI().sendItemBody(playerSummonShenron);
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron, "GƒÉng tay c·ªßa ng∆∞∆°i ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i hi·ªán t·∫°i c√≥ ƒëeo gƒÉng ƒë√¢u");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 2: // ch√≠ m·∫°ng +2%
                        if (this.playerSummonShenron.nPoint.critg < 9) {
                            this.playerSummonShenron.nPoint.critg += 2;
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron,
                                    "ƒêi·ªÅu ∆∞·ªõc n√†y ƒë√£ qu√° s·ª©c v·ªõi ta, ta s·∫Ω cho ng∆∞∆°i ch·ªçn l·∫°i");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 3: // thay chi√™u 2-3 ƒë·ªá t·ª≠
                        if (playerSummonShenron.pet != null) {
                            if (playerSummonShenron.pet.playerSkill.skills.get(1).skillId != -1) {
                                playerSummonShenron.pet.openSkill2();
                                if (playerSummonShenron.pet.playerSkill.skills.get(2).skillId != -1) {
                                    playerSummonShenron.pet.openSkill3();
                                }
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron,
                                        "√çt nh·∫•t ƒë·ªá t·ª≠ ng∆∞∆°i ph·∫£i c√≥ chi√™u 2 ch·ª©!");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i l√†m g√¨ c√≥ ƒë·ªá t·ª≠?");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                }
                break;
            case ConstNpc.SHENRON_1_2:
                switch (this.select) {
                    case 0: // ƒë·∫πp trai nh·∫•t v≈© tr·ª•
                        if (InventoryServiceNew.gI().getCountEmptyBag(playerSummonShenron) > 0) {
                            byte gender = this.playerSummonShenron.gender;
                            Item avtVip = ItemService.gI().createNewItem((short) (gender == ConstPlayer.TRAI_DAT ? 227
                                    : gender == ConstPlayer.NAMEC ? 228 : 229));
                            avtVip.itemOptions.add(new ItemOption(97, Util.nextInt(5, 10)));
                            avtVip.itemOptions.add(new ItemOption(77, Util.nextInt(10, 20)));
                            InventoryServiceNew.gI().addItemBag(playerSummonShenron, avtVip);
                            InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "H√†nh trang ƒë√£ ƒë·∫ßy");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                    case 1: // +1,5 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 2000;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 2: // suc manh tiem an
                        Item ct = ItemService.gI().createNewItem((short) 1193);
                        ct.itemOptions.add(new ItemOption(30, 0));
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, ct);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "B·∫°n nh·∫≠n ƒë∆∞·ª£c s·ª©c m·∫°nh ti·ªÅm ·∫©n");
                        break;
                    case 3: // gƒÉng tay ƒë·ªá l√™n 1 c·∫•p
                        if (this.playerSummonShenron.pet != null) {
                            Item item = this.playerSummonShenron.pet.inventory.itemsBody.get(2);
                            if (item.isNotNullItem()) {
                                int level = 0;
                                for (ItemOption io : item.itemOptions) {
                                    if (io.optionTemplate.id == 72) {
                                        level = io.param;
                                        if (level < 7) {
                                            io.param++;
                                        }
                                        break;
                                    }
                                }
                                if (level < 7) {
                                    if (level == 0) {
                                        item.itemOptions.add(new ItemOption(72, 1));
                                    }
                                    for (ItemOption io : item.itemOptions) {
                                        if (io.optionTemplate.id == 0) {
                                            io.param += (io.param * 10 / 100);
                                            break;
                                        }
                                    }
                                    Service.gI().point(playerSummonShenron);
                                } else {
                                    Service.gI().sendThongBao(playerSummonShenron,
                                            "GƒÉng tay c·ªßa ƒë·ªá ng∆∞∆°i ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa");
                                    reOpenShenronWishes(playerSummonShenron);
                                    return;
                                }
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron, "ƒê·ªá ng∆∞∆°i hi·ªán t·∫°i c√≥ ƒëeo gƒÉng ƒë√¢u");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i ƒë√¢u c√≥ ƒë·ªá t·ª≠");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                }
                break;

            case ConstNpc.SHENRON_2:
                switch (this.select) {
                    case 0: // +150 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 300;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: // +20 tr smtn
                        Service.gI().addSMTN(this.playerSummonShenron, (byte) 2, 20000000, false);
                        break;
                    case 2: // 2 tr v√†ng
                        if (this.playerSummonShenron.inventory.gold > 1800000000) {
                            this.playerSummonShenron.inventory.gold = Inventory.LIMIT_GOLD;
                        } else {
                            this.playerSummonShenron.inventory.gold += 2000000000;
                        }
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                }
                break;
            case ConstNpc.SHENRON_3:
                switch (this.select) {
                    case 0: // +15 ng·ªçc
                        this.playerSummonShenron.inventory.ruby += 50;
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                    case 1: // +2 tr smtn
                        Service.gI().addSMTN(this.playerSummonShenron, (byte) 2, 2000000, false);
                        break;
                    case 2: // 200k v√†ng
                        if (this.playerSummonShenron.inventory.gold > (2000000000 - 20000000)) {
                            this.playerSummonShenron.inventory.gold = Inventory.LIMIT_GOLD;
                        } else {
                            this.playerSummonShenron.inventory.gold += 20000000;
                        }
                        PlayerService.gI().sendInfoHpMpMoney(this.playerSummonShenron);
                        break;
                }
                break;
            case ConstNpc.SHENRONTRB:
                switch (this.select) {
                    case 0: // +30 sd
                        playerSummonShenron.itemTime.lastTimetrbsd = System.currentTimeMillis();
                        playerSummonShenron.itemTime.istrbsd = true;
                        ItemTimeService.gI().sendAllItemTime(playerSummonShenron);
                        Service.gI().point(playerSummonShenron);
                        break;
                    case 1: // +30hp
                        playerSummonShenron.itemTime.lastTimetrbhp = System.currentTimeMillis();
                        playerSummonShenron.itemTime.istrbhp = true;
                        ItemTimeService.gI().sendAllItemTime(playerSummonShenron);
                        Service.gI().point(playerSummonShenron);
                        break;
                    case 2: // 30ki
                        playerSummonShenron.itemTime.lastTimetrbki = System.currentTimeMillis();
                        playerSummonShenron.itemTime.istrbki = true;
                        ItemTimeService.gI().sendAllItemTime(playerSummonShenron);
                        Service.gI().point(playerSummonShenron);
                        break;
                    case 3: // +150 ng·ªçc
                        playerSummonShenron.itemTime.lastTimetrbcrit = System.currentTimeMillis();
                        playerSummonShenron.itemTime.istrbcrit = true;
                        ItemTimeService.gI().sendAllItemTime(playerSummonShenron);
                        Service.gI().point(playerSummonShenron);
                        break;
                    case 4: // gƒÉng tay ƒëang ƒëeo l√™n 1 c·∫•p
                        Item item = this.playerSummonShenron.inventory.itemsBody.get(2);
                        if (item.isNotNullItem()) {
                            int level = 0;
                            for (ItemOption io : item.itemOptions) {
                                if (io.optionTemplate.id == 5) {
                                    level = io.param;
                                    if (level < 7) {
                                        io.param++;
                                    }
                                    break;
                                }
                            }
                            if (level < 7) {
                                if (level == 0) {
                                    item.itemOptions.add(new ItemOption(5, 1));
                                }
                                for (ItemOption io : item.itemOptions) {
                                    if (io.optionTemplate.id == 0) {
                                        io.param += (io.param * 1 / 100);
                                        break;
                                    }
                                }
                                InventoryServiceNew.gI().sendItemBody(playerSummonShenron);
                            } else {
                                Service.gI().sendThongBao(playerSummonShenron, "GƒÉng tay c·ªßa ng∆∞∆°i ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa");
                                reOpenShenronWishes(playerSummonShenron);
                                return;
                            }
                        } else {
                            Service.gI().sendThongBao(playerSummonShenron, "Ng∆∞∆°i hi·ªán t·∫°i c√≥ ƒëeo gƒÉng ƒë√¢u");
                            reOpenShenronWishes(playerSummonShenron);
                            return;
                        }
                        break;
                }
                break;
            // bang
            case ConstNpc.SHENRONBANG:
                switch (this.select) {
                    case 0: // 99 manh ao
                        Item manhAo = ItemService.gI().createNewItem((short) 1066);
                        manhAo.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, manhAo);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 m·∫£nh √°o");

                        break;
                    case 1: // +30hp
                        Item manhQuan = ItemService.gI().createNewItem((short) 1067);
                        manhQuan.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, manhQuan);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 m·∫£nh qu·∫ßn");
                        break;
                    case 2: // 30ki
                        Item manhGang = ItemService.gI().createNewItem((short) 1070);
                        manhGang.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, manhGang);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 m·∫£nh gƒÉng");
                        break;
                    case 3: // +150 ng·ªçc
                        Item manhNhan = ItemService.gI().createNewItem((short) 1069);
                        manhNhan.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, manhNhan);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 m·∫£nh nh·∫´n");
                        break;
                    case 4: // gƒÉng tay ƒëang ƒëeo l√™n 1 c·∫•p
                        Item manhGiay = ItemService.gI().createNewItem((short) 1068);
                        manhGiay.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, manhGiay);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 m·∫£nh gi√†y");
                        break;

                }
                break;
            case ConstNpc.SHENRONBLACK:
                switch (this.select) {
                    case 0: // +30 sd
                        Item thoiVang = ItemService.gI().createNewItem((short) 457);
                        thoiVang.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, thoiVang);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 th·ªèi v√†ng");
                        break;
                    case 1: // +30hp
                        Item hongNgoc = ItemService.gI().createNewItem((short) 861);
                        hongNgoc.quantity = 5000;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, hongNgoc);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 5k h·ªìng ng·ªçc");
                        
                        break;
                    case 2: // 30ki
                        Item daNguSac = ItemService.gI().createNewItem((short) 674);
                        daNguSac.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, daNguSac);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 ƒë√° ng≈© s·∫Øc");
                        break;
                    case 3: // +150 ng·ªçc
                        Item quaHongDao = ItemService.gI().createNewItem((short) 1183);
                        quaHongDao.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, quaHongDao);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 qu·∫£ h·ªìng ƒë√†o");
                        break;
                    case 4: // gƒÉng tay ƒëang ƒëeo l√™n 1 c·∫•p
                        Item huyHieu = ItemService.gI().createNewItem((short) 1184);
                        huyHieu.quantity = 20;

                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, huyHieu);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                        Service.gI().sendThongBao(playerSummonShenron, "|2|B·∫°n nh·∫≠n ƒë∆∞·ª£c 20 huy ch∆∞∆°ng");
                        break;
                        
                }
                break;
            case ConstNpc.NAMEC_1:
                if (select == 0) {
                    if (playerSummonShenron.clan != null) {
                        playerSummonShenron.clan.members.forEach(m -> {
                            if (Client.gI().getPlayer(m.id) != null) {
                                Player p = Client.gI().getPlayer(m.id);
                                Item it = ItemService.gI().createNewItem((short) 16);
                                it.quantity = 30;
                                InventoryServiceNew.gI().addItemBag(p, it);
                                InventoryServiceNew.gI().sendItemBags(p);
                            } else {
                                Player p = GodGK.loadById(m.id);
                                if (p != null) {
                                    Item it = ItemService.gI().createNewItem((short) 16);
                                    it.quantity = 30;
                                    InventoryServiceNew.gI().addItemBag(p, it);
                                    PlayerDAO.updatePlayer(p);
                                }
                            }
                        });
                    } else {
                        Item it = ItemService.gI().createNewItem((short) 16);
                        it.quantity = 30;
                        InventoryServiceNew.gI().addItemBag(playerSummonShenron, it);
                        InventoryServiceNew.gI().sendItemBags(playerSummonShenron);
                    }
                }
                break;

        }
        shenronLeave(this.playerSummonShenron, WISHED);
    }

    public void showConfirmShenron(Player pl, int menu, byte select) {
        this.menuShenron = menu;
        this.select = select;
        String wish = null;
        switch (menu) {
            case ConstNpc.SHENRON_1_1:
                wish = SHENRON_1_STAR_WISHES_1[select];
                break;
            case ConstNpc.SHENRON_1_2:
                wish = SHENRON_1_STAR_WISHES_2[select];
                break;
            case ConstNpc.SHENRON_2:
                wish = SHENRON_2_STARS_WHISHES[select];
                break;
            case ConstNpc.SHENRON_3:
                wish = SHENRON_3_STARS_WHISHES[select];
                break;
            case ConstNpc.NAMEC_1:
                wish = "x99 ng·ªçc r·ªìng 3 sao";
                break;
            case ConstNpc.SHENRONTRB:
                wish = SHENRON_1_STAR_TRB[select];
                break;
            case ConstNpc.SHENRONBANG:
                wish = SHENRON_1_STAR_BANG[select];
                break;
            case ConstNpc.SHENRONBLACK:
                wish = SHENRON_1_STAR_BLACK[select];
                break;
        }
        NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_CONFIRM, "Ng∆∞∆°i c√≥ ch·∫Øc mu·ªën ∆∞·ªõc?", wish, "T·ª´ ch·ªëi");
    }

    public void reOpenShenronWishes(Player pl) {
        switch (menuShenron) {
            case ConstNpc.SHENRON_1_1:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_1, SHENRON_SAY, SHENRON_1_STAR_WISHES_1);
                break;
            case ConstNpc.SHENRON_1_2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_1_2, SHENRON_SAY, SHENRON_1_STAR_WISHES_2);
                break;
            case ConstNpc.SHENRON_2:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_2, SHENRON_SAY, SHENRON_2_STARS_WHISHES);
                break;
            case ConstNpc.SHENRON_3:
                NpcService.gI().createMenuRongThieng(pl, ConstNpc.SHENRON_3, SHENRON_SAY, SHENRON_3_STARS_WHISHES);
                break;
        }
    }

    public void shenronLeave(Player pl, byte type) {
        if (type == WISHED) {
            NpcService.gI().createTutorial(pl, -1,
                    "ƒêi·ªÅu ∆∞·ªõc c·ªßa ng∆∞∆°i ƒë√£ tr·ªü th√†nh s·ª± th·∫≠t\nH·∫πn g·∫∑p ng∆∞∆°i l·∫ßn sau, ta ƒëi ng·ªß ƒë√¢y, b√°i bai");
        } else {
            NpcService.gI().createMenuRongThieng(pl, ConstNpc.IGNORE_MENU,
                    "Ta bu·ªìn ng·ªß qu√° r·ªìi\nH·∫πn g·∫∑p ng∆∞∆°i l·∫ßn sau, ta ƒëi ƒë√¢y, b√°i bai");
        }
        activeShenron(pl, false, SummonDragon.DRAGON_SHENRON);
        this.isShenronAppear = false;
        this.menuShenron = -1;
        this.select = -1;
        this.playerSummonShenron = null;
        this.playerSummonShenronId = -1;
        this.shenronStar = -1;
        this.mapShenronAppear = null;
        lastTimeShenronAppeared = System.currentTimeMillis();
        lastTimebangAppeared = System.currentTimeMillis();
        lastTimeblackAppeared = System.currentTimeMillis();
        lastTimetrbAppeared = System.currentTimeMillis();
    }

    // --------------------------------------------------------------------------
}
